name: publish-release

on:
  push:
    branches: ['main', 'develop']
    paths:
      - 'short_urls/**'
      - '.github/workflows/*.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - '.gitignore'
      - 'requirements.txt'
      - 'short_urls_run.sh'
  pull_request:
    branches: ['main', 'develop']
    paths:
      - 'short_urls/**'
      - '.github/workflows/*.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - '.gitignore'
      - 'requirements.txt'
      - 'short_urls_run.sh'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out the repo
        uses: actions/checkout@v3
        #with:
          #ref: 'master'
          # fetch-depth: 0 # fetch all history so multiple commits can be scanned
      # - name: TEST keycloak.json
        # run: |
          # cat ./public/keycloak.json
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Push to Docker Hub
        # uses: docker/build-push-action@v2
        # with:
          # context: .
          # push: true
          # tags: devasteam/deva-crm:latest
          # pull: true
      - name: Build the latest Docker image
        run: docker build . --cache-from ministrbob/short-urls:latest --build-arg BUILDKIT_INLINE_CACHE=1 --file Dockerfile --tag ministrbob/short-urls:latest
      - name: Push the latest Docker image
        run: docker push ministrbob/short-urls:latest

  deploy_to_test:
    name: Deploy to test environment
    if: github.event.ref == 'refs/heads/develop'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure test SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$TEST_SSH_KEY" > ~/.ssh/test.key
          chmod 600 ~/.ssh/test.key
          cat >>~/.ssh/config <<END
          Host test
            HostName $TEST_SSH_HOST
            Port $TEST_SSH_PORT
            User $TEST_SSH_USER
            IdentityFile ~/.ssh/test.key
            StrictHostKeyChecking no
          END
          cat ~/.ssh/config
        env:
          SSH_USER: ${{ secrets.TEST_SSH_USER }}
          SSH_KEY: ${{ secrets.TEST_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.TEST_SSH_HOST }}
          SSH_PORT: ${{ secrets.TEST_SSH_PORT }}
      # result = /home/runner/work/short-urls/short-urls
      # - name: pwd
        # run: pwd
      # - name: ls -al
        # run: ls -al
      - name: Copy short_urls_run.sh
        run: scp /home/runner/work/short-urls/short-urls/short_urls_run.sh test:/home/dr/short_urls_run.sh
      - name: Execute short_urls_run.sh
        run: ssh test '/home/dr/short_urls_run.sh'

  deploy_to_prod:
    name: Deploy to prod environment
    if: github.event.ref == 'refs/heads/main'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure prod SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
      # result = /home/runner/work/short-urls/short-urls
      # - name: pwd
        # run: pwd
      # - name: ls -al
        # run: ls -al
      - name: Copy short_urls_run.sh
        run: scp /home/runner/work/short-urls/short-urls/short_urls_run.sh prod:/home/dr/short_urls_run.sh
      - name: Execute short_urls_run.sh
        run: ssh prod '/home/dr/short_urls_run.sh'
